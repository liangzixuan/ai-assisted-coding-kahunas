// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  COACH
  CLIENT
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum TimeBlockType {
  AVAILABLE
  UNAVAILABLE
  BREAK
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(CLIENT)
  
  // Profile information
  bio           String?
  specializations String?
  phoneNumber   String?
  timeZone      String?
  
  // Account status
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  
  // Coach-specific relations
  coachClients  ClientRelationship[] @relation("CoachUser")
  coachAppointments Appointment[] @relation("CoachAppointment")
  coachTimeBlocks TimeBlock[] @relation("CoachTimeBlock")
  
  // Client-specific relations
  clientCoaches ClientRelationship[] @relation("ClientUser")
  clientAppointments Appointment[] @relation("ClientAppointment")
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model ClientRelationship {
  id        String   @id @default(cuid())
  coachId   String
  clientId  String
  status    String   @default("active") // active, inactive, pending
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  coach     User     @relation("CoachUser", fields: [coachId], references: [id], onDelete: Cascade)
  client    User     @relation("ClientUser", fields: [clientId], references: [id], onDelete: Cascade)
  
  @@unique([coachId, clientId])
  @@map("client_relationships")
}

model Appointment {
  id          String            @id @default(cuid())
  coachId     String
  clientId    String
  date        String            // YYYY-MM-DD format
  startTime   String            // HH:MM format
  endTime     String            // HH:MM format
  duration    Int               // in minutes
  type        String            // session type
  status      AppointmentStatus @default(PENDING)
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  coach       User              @relation("CoachAppointment", fields: [coachId], references: [id], onDelete: Cascade)
  client      User              @relation("ClientAppointment", fields: [clientId], references: [id], onDelete: Cascade)
  
  @@map("appointments")
}

model TimeBlock {
  id          String        @id @default(cuid())
  coachId     String
  date        String        // YYYY-MM-DD format
  startTime   String        // HH:MM format
  endTime     String        // HH:MM format
  type        TimeBlockType @default(AVAILABLE)
  title       String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  coach       User          @relation("CoachTimeBlock", fields: [coachId], references: [id], onDelete: Cascade)
  
  @@map("time_blocks")
}
